"use client";
import React, { useState } from "react";
import { Plus, X, Calendar, Clock } from "lucide-react";

const SchedulerSection = () => {
  const [courses, setCourses] = useState([]);
  const [currentCourse, setCurrentCourse] = useState({
    courseCode: "",
    availableSlots: [],
  });
  const [currentSlot, setCurrentSlot] = useState({
    days: [],
    startTime: "",
    endTime: "",
  });

  const daysOfWeek = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ];
  const timeOptions = [
    "7:00 AM",
    "7:30 AM",
    "8:00 AM",
    "8:30 AM",
    "9:00 AM",
    "9:30 AM",
    "10:00 AM",
    "10:30 AM",
    "11:00 AM",
    "11:30 AM",
    "12:00 PM",
    "12:30 PM",
    "1:00 PM",
    "1:30 PM",
    "2:00 PM",
    "2:30 PM",
    "3:00 PM",
    "3:30 PM",
    "4:00 PM",
    "4:30 PM",
    "5:00 PM",
    "5:30 PM",
    "6:00 PM",
    "6:30 PM",
    "7:00 PM",
  ];

  const dayPresets = [
    { label: "MW", days: ["Monday", "Wednesday"] },
    { label: "TR", days: ["Tuesday", "Thursday"] },
    { label: "WF", days: ["Wednesday", "Friday"] },
    { label: "MWF", days: ["Monday", "Wednesday", "Friday"] },
    { label: "TRF", days: ["Tuesday", "Thursday", "Friday"] },
    {
      label: "MTWRF",
      days: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
    },
  ];

  const convertTo24Hour = (time12h) => {
    const [time, modifier] = time12h.split(" ");
    let [hours, minutes] = time.split(":");
    if (hours === "12") hours = "00";
    if (modifier === "PM") hours = parseInt(hours, 10) + 12;
    return parseInt(hours) + parseInt(minutes) / 60;
  };

  const handleDayToggle = (day) => {
    setCurrentSlot((prev) => ({
      ...prev,
      days: prev.days.includes(day)
        ? prev.days.filter((d) => d !== day)
        : [...prev.days, day],
    }));
  };

  const addTimeSlot = () => {
    if (currentSlot.startTime && currentSlot.endTime) {
      const startHour = convertTo24Hour(currentSlot.startTime);
      const endHour = convertTo24Hour(currentSlot.endTime);

      if (endHour <= startHour) {
        alert("End time must be after start time!");
        return;
      }
    }

    if (
      currentSlot.days.length > 0 &&
      currentSlot.startTime &&
      currentSlot.endTime
    ) {
      setCurrentCourse((prev) => ({
        ...prev,
        availableSlots: [...prev.availableSlots, { ...currentSlot }],
      }));
      setCurrentSlot({ days: [], startTime: "", endTime: "" });
    }
  };

  const removeTimeSlot = (index) => {
    setCurrentCourse((prev) => ({
      ...prev,
      availableSlots: prev.availableSlots.filter((_, i) => i !== index),
    }));
  };

  const addCourse = () => {
    if (currentCourse.courseCode && currentCourse.availableSlots.length > 0) {
      setCourses((prev) => [...prev, { ...currentCourse }]);
      setCurrentCourse({ courseCode: "", availableSlots: [] });
    }
  };

  const removeCourse = (index) => {
    setCourses((prev) => prev.filter((_, i) => i !== index));
  };

  const generateSchedule = () => {
    alert("Schedule generation would happen here!");
  };

  const isPresetSelected = (presetDays) => {
    return (
      JSON.stringify(currentSlot.days.sort()) ===
      JSON.stringify(presetDays.sort())
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 flex items-center">
          <Calendar className="mr-3 text-blue-600" />
          Course Scheduler
        </h1>

        {/* Course Input Section */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">
            Add New Course
          </h2>

          {/* Course Code Input */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Course Code
            </label>
            <input
              type="text"
              placeholder="e.g., CS101, MATH201"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              value={currentCourse.courseCode}
              onChange={(e) =>
                setCurrentCourse((prev) => ({
                  ...prev,
                  courseCode: e.target.value,
                }))
              }
            />
          </div>

          {/* Time Slot Input */}
          <div className="border border-gray-200 rounded-lg p-4 mb-4">
            <h3 className="font-medium text-gray-700 mb-3 flex items-center">
              <Clock className="mr-2" size={16} />
              Add Time Slot Option
            </h3>

            {/* Day Selection */}
            <div className="mb-3">
              <label className="block text-sm font-medium text-gray-600 mb-2">
                Days
              </label>

              {/* Preset Combinations */}
              <div className="mb-3">
                <p className="text-xs text-gray-500 mb-2">
                  Common Combinations:
                </p>
                <div className="flex flex-wrap gap-2">
                  {dayPresets.map((preset) => (
                    <button
                      key={preset.label}
                      type="button"
                      onClick={() =>
                        setCurrentSlot((prev) => ({
                          ...prev,
                          days: preset.days,
                        }))
                      }
                      className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                        isPresetSelected(preset.days)
                          ? "bg-blue-600 text-white"
                          : "bg-blue-100 text-blue-700 hover:bg-blue-200"
                      }`}
                    >
                      {preset.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Individual Day Toggles */}
              <div>
                <p className="text-xs text-gray-500 mb-2">
                  Or select individual days:
                </p>
                <div className="flex flex-wrap gap-2">
                  {daysOfWeek.map((day) => (
                    <button
                      key={day}
                      type="button"
                      onClick={() => handleDayToggle(day)}
                      className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                        currentSlot.days.includes(day)
                          ? "bg-green-600 text-white"
                          : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                      }`}
                    >
                      {day.slice(0, 3)}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Time Selection */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-2">
                  Start Time
                </label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  value={currentSlot.startTime}
                  onChange={(e) =>
                    setCurrentSlot((prev) => ({
                      ...prev,
                      startTime: e.target.value,
                    }))
                  }
                >
                  <option value="">Select start time</option>
                  {timeOptions.map((time) => (
                    <option key={time} value={time}>
                      {time}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-2">
                  End Time
                </label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  value={currentSlot.endTime}
                  onChange={(e) =>
                    setCurrentSlot((prev) => ({
                      ...prev,
                      endTime: e.target.value,
                    }))
                  }
                >
                  <option value="">Select end time</option>
                  {timeOptions.map((time) => (
                    <option key={time} value={time}>
                      {time}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <button
              onClick={addTimeSlot}
              className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <Plus size={16} className="mr-2" />
              Add Time Slot
            </button>
          </div>

          {/* Display Added Time Slots */}
          {currentCourse.availableSlots.length > 0 && (
            <div className="mb-4">
              <h4 className="font-medium text-gray-700 mb-2">
                Time Slot Options:
              </h4>
              <div className="space-y-2">
                {currentCourse.availableSlots.map((slot, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between bg-blue-50 p-3 rounded-lg"
                  >
                    <span className="text-sm">
                      <strong>{slot.days.join(", ")}</strong> | {slot.startTime}{" "}
                      - {slot.endTime}
                    </span>
                    <button
                      onClick={() => removeTimeSlot(index)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <X size={16} />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          <button
            onClick={addCourse}
            disabled={
              !currentCourse.courseCode ||
              currentCourse.availableSlots.length === 0
            }
            className="w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
          >
            Add Course
          </button>
        </div>

        {/* Added Courses List */}
        {courses.length > 0 && (
          <div className="mb-8">
            <h2 className="text-xl font-semibold mb-4 text-gray-700">
              Added Courses
            </h2>
            <div className="space-y-4">
              {courses.map((course, courseIndex) => (
                <div
                  key={courseIndex}
                  className="border border-gray-200 rounded-lg p-4"
                >
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold text-lg text-gray-800">
                      {course.courseCode}
                    </h3>
                    <button
                      onClick={() => removeCourse(courseIndex)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <X size={20} />
                    </button>
                  </div>
                  <div className="space-y-2">
                    {course.availableSlots.map((slot, slotIndex) => (
                      <div
                        key={slotIndex}
                        className="text-sm bg-gray-100 p-2 rounded"
                      >
                        <strong>Option {slotIndex + 1}:</strong>{" "}
                        {slot.days.join(", ")} | {slot.startTime} -{" "}
                        {slot.endTime}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Generate Schedule Button */}
        {courses.length > 0 && (
          <div className="text-center">
            <button
              onClick={generateSchedule}
              className="px-8 py-4 bg-purple-600 text-white text-lg font-semibold rounded-lg hover:bg-purple-700 transition-colors"
            >
              Generate Schedule
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default SchedulerSection;
